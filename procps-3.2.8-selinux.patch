diff -aur procps-3.2.8.pristine//Makefile procps-3.2.8.new//Makefile
--- procps-3.2.8.pristine//Makefile	2010-07-23 15:45:52.829554761 +0200
+++ procps-3.2.8.new//Makefile	2010-07-23 15:48:55.956206700 +0200
@@ -73,17 +73,17 @@
 # Something like this is probably needed to make the SE Linux
 # library loading not conflict with embedded systems stuff.
 #
-#ifeq ($(SHARED),1)
-#ldl := -ldl
-#LIBTYPE := -DSHAREDLIB
-#else
-#LIBTYPE := -DSTATICLIB
-#endif
+ifeq ($(SHARED),1)
+ldl := -ldl
+LIBTYPE := -DSHAREDLIB
+else
+LIBTYPE := -DSTATICLIB
+endif
 
 # Preprocessor flags.
 PKG_CPPFLAGS := -D_GNU_SOURCE -I proc
 CPPFLAGS     := -I/usr/include/ncurses
-ALL_CPPFLAGS := $(PKG_CPPFLAGS) $(CPPFLAGS)
+ALL_CPPFLAGS := $(PKG_CPPFLAGS) $(CPPFLAGS) $(LIBTYPE)
 
 # Left out -Wconversion due to noise in glibc headers.
 # Left out -Wunreachable-code and -Wdisabled-optimization
diff -aur procps-3.2.8.pristine//ps/output.c procps-3.2.8.new//ps/output.c
--- procps-3.2.8.pristine//ps/output.c	2010-07-23 15:45:52.836223643 +0200
+++ procps-3.2.8.new//ps/output.c	2010-07-23 15:54:41.372842564 +0200
@@ -1099,7 +1099,7 @@
   return snprintf(outbuf, COLWID, "*");
 }
 
-
+#ifdef STATICLIB
 /****************** FLASK & seLinux security stuff **********************/
 // move the bulk of this to libproc sometime
 
@@ -1131,7 +1131,7 @@
   return 1;
 }
 
-#if 0
+#else
 // This needs more study, considering:
 // 1. the static linking option (maybe disable this in that case)
 // 2. the -z and -Z option issue
@@ -1143,7 +1143,7 @@
   char *context;
 
   if(!ps_getpidcon && !tried_load){
-    void *handle = dlopen("libselinux.so.1", RTLD_NOW);
+    void *handle = dlopen("libselinux.so", RTLD_NOW);
     if(handle){
       dlerror();
       ps_getpidcon = dlsym(handle, "getpidcon");
diff -aur procps-3.2.8.pristine//w.c procps-3.2.8.new//w.c
--- procps-3.2.8.pristine//w.c	2010-07-23 15:45:52.829554761 +0200
+++ procps-3.2.8.new//w.c	2010-07-23 16:05:53.042775257 +0200
@@ -163,6 +163,10 @@
 	if(best && tmp->start_time <= best->start_time) continue;
     	best = tmp;
     }
+    /* It is there but SELinux wouldn't allow us to know the detail. Really
+	w should just be given rights */
+    if(!kill(u->ut_pid, 0) || errno != ESRCH)
+	*found_utpid = 1;
     return best ? best : secondbest;
 }
 
